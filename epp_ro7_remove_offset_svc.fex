-******************************************************************************
-* Program:      epp_RO7_remove_offset_svc.fex
-* Title:        Remove offsetting ERA transactions
-* Author:       Bill Schwartz
-* Date:         02/18/2016
-* Description:  The purpose of this fex is to remove offsetting ERA transactions.
-*               To be recognized as offsetting transactions must be exact
-*               mirror images of each other - including CAS group codes, reason
-*               codes and amounts.
-******************************************************************************
-* Tables Accessed:
-* Tables Updated:
-******************************************************************************
-* Include/EX Files:
-******************************************************************************
-* Files Allocated:
-******************************************************************************
-* Change History:
-* Programmer    Date          Description of Change
-* ----------  ----------  -------------------------------
-*     WLS     02/18/2016  Add/update audit functionality
-******************************************************************************
-*-SET &ECHO = ALL;
-TYPE *************************************************************************
-SET  &NOWTIME = HHMMSS(A8);
-RUN
-TYPE &NOWTIME.EVAL START &FOCFEXNAME.EVAL
-TYPE -------------------------------------------------------------------------
-IF  &DFLTCNTL.EXISTS EQ 1 THEN GOTO STEP001;
-******************************************************************************
-STEP000
-SET  &STEP          = '&FOCFEXNAME.EVAL'||'.'||'STEP000';
-SET  &NOWTIME       = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL
-TYPE &NOWTIME.EVAL *** Establish APP PATH and defaults
-RUN
-*-----------------------------------------------------------------------------
-INCLUDE EPP/EPP_DEFAULTS
-*-----------------------------------------------------------------------------
-SET  &NOWTIME = HHMMSS(A8);
-SET  &STEP    = '&FOCFEXNAME.EVAL'||'.'||'STEP000';
-TYPE &NOWTIME.EVAL &STEP.EVAL COMPLETE RETCODE&RETCODE.EVAL
-TYPE -------------------------------------------------------------------------
-IF   &FOCERRNUM.EVAL NE 0 THEN GOTO ERRORS;
-*-----------------------------------------------------------------------------
-STEP001
-SET  &STEP    = '&FOCFEXNAME.EVAL'||'.'||'STEP001';
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL Mark exact offsetting transactions as excluded
-*-----------------------------------------------------------------------------
SQL
MERGE INTO &SVC.EVAL&SVC_TBL.EVAL UT
USING (
SELECT /*+ NOPARALLEL ORDERED NO_UNNEST */
      S3.SVC_ISA_FILE_ID
     ,S3.SVC_GS_GRP_SEQ_NO
     ,S3.SVC_ST_SEQ_NO
     ,S3.SVC_LX_SEQ_NO
     ,S3.SVC_CLP_CLM_SEQ_NO
     ,S3.SVC_SEQ_NO
     ,S3.SVC_EPP_GEN_SEQ
					,T1.CLP_CLM_SUBMTR_ID
FROM
(
SELECT
      CLP_CLM_SUBMTR_ID
     ,SVC_DTM_DATE
     ,SVC_PROC1_CD
     ,SVC_ORGLI_PRVDR_PYMT
     ,SVC_LI_PRVDR_PYMT
     ,RANK()
      OVER ( PARTITION BY CLP_CLM_SUBMTR_ID
                         ,SVC_DTM_DATE
                         ,SVC_PROC1_CD
                         ,SVC_ORGLI_PRVDR_PYMT
                         ,SVC_LI_PRVDR_PYMT
             ORDER BY     CLP_CLM_SUBMTR_ID
                         ,SVC_DTM_DATE
                         ,SVC_PROC1_CD
                         ,SVC_ORGLI_PRVDR_PYMT
                         ,SVC_LI_PRVDR_PYMT
                         ,SVC_ISA_FILE_ID
                         ,SVC_GS_GRP_SEQ_NO
                         ,SVC_ST_SEQ_NO
                         ,SVC_LX_SEQ_NO
                         ,SVC_CLP_CLM_SEQ_NO
                         ,SVC_SEQ_NO) AS S_RANK
     ,SVC_ISA_FILE_ID
     ,SVC_GS_GRP_SEQ_NO
     ,SVC_ST_SEQ_NO
     ,SVC_LX_SEQ_NO
     ,SVC_CLP_CLM_SEQ_NO
     ,SVC_SEQ_NO
     ,SVC_EPP_GEN_SEQ
FROM
(
SELECT
      RTRIM(CLP_CLM_SUBMTR_ID)  AS CLP_CLM_SUBMTR_ID
     ,RTRIM(SVC_DTM_DATE)       AS SVC_DTM_DATE
     ,RTRIM(SVC_PROC1_CD)       AS SVC_PROC1_CD
     ,0-TO_NUMBER(COALESCE(RTRIM(SVC_ORGLI_PRVDR_PYMT),'0'))
                                AS SVC_ORGLI_PRVDR_PYMT
     ,0-TO_NUMBER(COALESCE(RTRIM(SVC_LI_PRVDR_PYMT),'0'))
                                AS SVC_LI_PRVDR_PYMT
     ,SVC_ISA_FILE_ID
     ,SVC_GS_GRP_SEQ_NO
     ,SVC_ST_SEQ_NO
     ,SVC_LX_SEQ_NO
     ,SVC_CLP_CLM_SEQ_NO
     ,SVC_SEQ_NO
     ,SVC_EPP_GEN_SEQ
FROM  &ST.EVAL&ST_TBL.EVAL
INNER JOIN
      &CLP.EVAL&CLP_TBL.EVAL C1
ON    CLP_ISA_FILE_ID        = ST_ISA_FILE_ID
  AND CLP_GS_GRP_SEQ_NO      = ST_GS_GRP_SEQ_NO
  AND CLP_ST_SEQ_NO          = ST_SEQ_NO
  AND CLP_CLM_STATUS_CD      = '22'
  AND CLP_EXCL_RSN_CD        = '   '
  AND SUBSTR(CLP_CLM_SUBMTR_ID,1,1) = 'P'
INNER JOIN
      &SVC.EVAL&SVC_TBL.EVAL
ON    SVC_ISA_FILE_ID        = CLP_ISA_FILE_ID
  AND SVC_GS_GRP_SEQ_NO      = CLP_GS_GRP_SEQ_NO
  AND SVC_ST_SEQ_NO          = CLP_ST_SEQ_NO
  AND SVC_LX_SEQ_NO          = CLP_LX_SEQ_NO
  AND SVC_CLP_CLM_SEQ_NO     = CLP_CLM_SEQ_NO
  AND RTRIM(SVC_PROC2_CD)    IS NULL
  AND SVC_EXCL_RSN_CD        = '   '
		AND 0                      = TO_NUMBER(COALESCE(RTRIM(SVC_LI_PRVDR_PYMT),'0'))
INNER JOIN
      &SVC_DTM.EVAL&SVC_DTM_TBL.EVAL
ON    SVC_DTM_ISA_FILE_ID    = SVC_ISA_FILE_ID
  AND SVC_DTM_GS_GRP_SEQ_NO  = SVC_GS_GRP_SEQ_NO
  AND SVC_DTM_ST_SEQ_NO      = SVC_ST_SEQ_NO
  AND SVC_DTM_LX_SEQ_NO      = SVC_LX_SEQ_NO
  AND SVC_DTM_CLP_CLM_SEQ_NO = SVC_CLP_CLM_SEQ_NO
  AND SVC_DTM_SVC_SEQ_NO     = SVC_SEQ_NO
  AND SVC_DTM_DTTM_QLFR      IN( '472','150' )
  AND SVC_DTM_EXCL_RSN_CD    = '   '
WHERE ST_EXCL_RSN_CD         = '   '
  AND NOT EXISTS
    ( SELECT /*+ PARALLEL ORDERED NO_UNNEST */ 1
      FROM   &CLP_CAS.EVAL&CLP_CAS_TBL.EVAL
      WHERE  CLP_CAS_ISA_FILE_ID      = CLP_ISA_FILE_ID
        AND  CLP_CAS_GS_GRP_SEQ_NO    = CLP_GS_GRP_SEQ_NO
        AND  CLP_CAS_ST_SEQ_NO        = CLP_ST_SEQ_NO
        AND  CLP_CAS_LX_SEQ_NO        = CLP_LX_SEQ_NO
        AND  CLP_CAS_CLP_CLM_SEQ_NO   = CLP_CLM_SEQ_NO
        AND  CLP_CAS_EXCL_RSN_CD      = '   ' )
  AND EXISTS
		  (  SELECT /*+ PARALLEL ORDERED NO_UNNEST */ 1
				   FROM  CLARITY_TDL_TRAN  X
							     ,ARPB_TRANSACTIONS Y
							WHERE X.INVOICE_NUMBER    = RTRIM(CLP_CLM_SUBMTR_ID)
							  AND X.ORIG_SERVICE_DATE = TO_DATE(SVC_DTM_DATE,'YYYYMMDD')
									AND X.CPT_CODE          = RTRIM(SVC_PROC1_CD) 
									AND X.ORIG_AMT          = 0-TO_NUMBER(COALESCE(RTRIM(SVC_ORGLI_PRVDR_PYMT),'0'))
									AND Y.TX_ID             = X.TX_ID
									AND Y.VOID_DATE         IS NOT NULL )   
  AND NOT EXISTS
		  (  SELECT /*+ PARALLEL ORDERED NO_UNNEST */ 1
				   FROM  CLARITY_TDL_TRAN  X
							     ,ARPB_TRANSACTIONS Y
							WHERE X.INVOICE_NUMBER    = RTRIM(CLP_CLM_SUBMTR_ID)
							  AND X.ORIG_SERVICE_DATE = TO_DATE(SVC_DTM_DATE,'YYYYMMDD')
									AND X.CPT_CODE          = RTRIM(SVC_PROC1_CD) 
									AND X.ORIG_AMT          = 0-TO_NUMBER(COALESCE(RTRIM(SVC_ORGLI_PRVDR_PYMT),'0'))
									AND Y.TX_ID             = X.TX_ID
									AND Y.VOID_DATE         IS NULL )   
)
ORDER BY 1,2,3,4,5,6,7
) T1
INNER JOIN
(
SELECT
      CLP_CLM_SUBMTR_ID
     ,SVC_DTM_DATE
     ,SVC_PROC1_CD
     ,SVC_ORGLI_PRVDR_PYMT
     ,SVC_LI_PRVDR_PYMT
     ,RANK()
      OVER ( PARTITION BY CLP_CLM_SUBMTR_ID
                         ,SVC_DTM_DATE
                         ,SVC_PROC1_CD
                         ,SVC_ORGLI_PRVDR_PYMT
                         ,SVC_LI_PRVDR_PYMT
             ORDER BY     CLP_CLM_SUBMTR_ID
                         ,SVC_DTM_DATE
                         ,SVC_PROC1_CD
                         ,SVC_ORGLI_PRVDR_PYMT
                         ,SVC_LI_PRVDR_PYMT
                         ,SVC_ISA_FILE_ID
                         ,SVC_GS_GRP_SEQ_NO
                         ,SVC_ST_SEQ_NO
                         ,SVC_LX_SEQ_NO
                         ,SVC_CLP_CLM_SEQ_NO
                         ,SVC_SEQ_NO) AS S_RANK
     ,SVC_ISA_FILE_ID
     ,SVC_GS_GRP_SEQ_NO
     ,SVC_ST_SEQ_NO
     ,SVC_LX_SEQ_NO
     ,SVC_CLP_CLM_SEQ_NO
     ,SVC_SEQ_NO
     ,SVC_EPP_GEN_SEQ
FROM
(
SELECT
      RTRIM(CLP_CLM_SUBMTR_ID)  AS CLP_CLM_SUBMTR_ID
     ,RTRIM(SVC_DTM_DATE)       AS SVC_DTM_DATE
     ,RTRIM(SVC_PROC1_CD)       AS SVC_PROC1_CD
     ,TO_NUMBER(COALESCE(RTRIM(SVC_ORGLI_PRVDR_PYMT),'0'))
                                AS SVC_ORGLI_PRVDR_PYMT
     ,TO_NUMBER(COALESCE(RTRIM(SVC_LI_PRVDR_PYMT),'0'))
                                AS SVC_LI_PRVDR_PYMT
     ,SVC_ISA_FILE_ID
     ,SVC_GS_GRP_SEQ_NO
     ,SVC_ST_SEQ_NO
     ,SVC_LX_SEQ_NO
     ,SVC_CLP_CLM_SEQ_NO
     ,SVC_SEQ_NO
     ,SVC_EPP_GEN_SEQ
FROM  &ST.EVAL&ST_TBL.EVAL
INNER JOIN
      &CLP.EVAL&CLP_TBL.EVAL C1
ON    CLP_ISA_FILE_ID        = ST_ISA_FILE_ID
  AND CLP_GS_GRP_SEQ_NO      = ST_GS_GRP_SEQ_NO
  AND CLP_ST_SEQ_NO          = ST_SEQ_NO
  AND CLP_EXCL_RSN_CD        = '   '
  AND SUBSTR(CLP_CLM_SUBMTR_ID,1,1) = 'P'
  AND RTRIM(CLP_CLM_STATUS_CD)      IN('1','2','3','4')
INNER JOIN
      &SVC.EVAL&SVC_TBL.EVAL
ON    SVC_ISA_FILE_ID        = CLP_ISA_FILE_ID
  AND SVC_GS_GRP_SEQ_NO      = CLP_GS_GRP_SEQ_NO
  AND SVC_ST_SEQ_NO          = CLP_ST_SEQ_NO
  AND SVC_LX_SEQ_NO          = CLP_LX_SEQ_NO
  AND SVC_CLP_CLM_SEQ_NO     = CLP_CLM_SEQ_NO
  AND SVC_EXCL_RSN_CD        = '   '
		AND 0                      = TO_NUMBER(COALESCE(RTRIM(SVC_LI_PRVDR_PYMT),'0'))
INNER JOIN
      &SVC_DTM.EVAL&SVC_DTM_TBL.EVAL
ON    SVC_DTM_ISA_FILE_ID    = SVC_ISA_FILE_ID
  AND SVC_DTM_GS_GRP_SEQ_NO  = SVC_GS_GRP_SEQ_NO
  AND SVC_DTM_ST_SEQ_NO      = SVC_ST_SEQ_NO
  AND SVC_DTM_LX_SEQ_NO      = SVC_LX_SEQ_NO
  AND SVC_DTM_CLP_CLM_SEQ_NO = SVC_CLP_CLM_SEQ_NO
  AND SVC_DTM_SVC_SEQ_NO     = SVC_SEQ_NO
  AND SVC_DTM_DTTM_QLFR      IN( '472','150' )
  AND SVC_DTM_EXCL_RSN_CD    = '   '
WHERE ST_EXCL_RSN_CD         = '   '
  AND NOT EXISTS
    ( SELECT /*+ PARALLEL ORDERED NO_UNNEST */ 1
      FROM   &CLP_CAS.EVAL&CLP_CAS_TBL.EVAL
      WHERE  CLP_CAS_ISA_FILE_ID    = CLP_ISA_FILE_ID
        AND  CLP_CAS_GS_GRP_SEQ_NO  = CLP_GS_GRP_SEQ_NO
        AND  CLP_CAS_ST_SEQ_NO      = CLP_ST_SEQ_NO
        AND  CLP_CAS_LX_SEQ_NO      = CLP_LX_SEQ_NO
        AND  CLP_CAS_CLP_CLM_SEQ_NO = CLP_CLM_SEQ_NO
        AND  CLP_CAS_EXCL_RSN_CD    = '   ' )
  AND EXISTS
		  (  SELECT /*+ PARALLEL ORDERED NO_UNNEST */ 1
				   FROM  CLARITY_TDL_TRAN  X
							     ,ARPB_TRANSACTIONS Y
							WHERE X.INVOICE_NUMBER    = RTRIM(CLP_CLM_SUBMTR_ID)
							  AND X.ORIG_SERVICE_DATE = TO_DATE(SVC_DTM_DATE,'YYYYMMDD')
									AND X.CPT_CODE          = RTRIM(SVC_PROC1_CD) 
									AND X.ORIG_AMT          = TO_NUMBER(COALESCE(RTRIM(SVC_ORGLI_PRVDR_PYMT),'0'))
									AND Y.TX_ID             = X.TX_ID
									AND Y.VOID_DATE         IS NOT NULL )  
  AND NOT EXISTS
		  (  SELECT /*+ PARALLEL ORDERED NO_UNNEST */ 1
				   FROM  CLARITY_TDL_TRAN  X
							     ,ARPB_TRANSACTIONS Y
							WHERE X.INVOICE_NUMBER    = RTRIM(CLP_CLM_SUBMTR_ID)
							  AND X.ORIG_SERVICE_DATE = TO_DATE(SVC_DTM_DATE,'YYYYMMDD')
									AND X.CPT_CODE          = RTRIM(SVC_PROC1_CD) 
									AND X.ORIG_AMT          = 0-TO_NUMBER(COALESCE(RTRIM(SVC_ORGLI_PRVDR_PYMT),'0'))
									AND Y.TX_ID             = X.TX_ID
									AND Y.VOID_DATE         IS NULL )   									 
)
ORDER BY 1,2,3,4,5,6,7
) T2
ON    T2.CLP_CLM_SUBMTR_ID     = T1.CLP_CLM_SUBMTR_ID
  AND T2.SVC_DTM_DATE          = T1.SVC_DTM_DATE
  AND T2.SVC_PROC1_CD          = T1.SVC_PROC1_CD
  AND T2.SVC_ORGLI_PRVDR_PYMT  = T1.SVC_ORGLI_PRVDR_PYMT
  AND T2.SVC_LI_PRVDR_PYMT     = T1.SVC_LI_PRVDR_PYMT
  AND T2.S_RANK                = T1.S_RANK
INNER JOIN
      &SVC.EVAL&SVC_TBL.EVAL S3
ON (  S3.SVC_ISA_FILE_ID       = T1.SVC_ISA_FILE_ID
  AND S3.SVC_GS_GRP_SEQ_NO     = T1.SVC_GS_GRP_SEQ_NO
  AND S3.SVC_ST_SEQ_NO         = T1.SVC_ST_SEQ_NO
  AND S3.SVC_LX_SEQ_NO         = T1.SVC_LX_SEQ_NO
  AND S3.SVC_CLP_CLM_SEQ_NO    = T1.SVC_CLP_CLM_SEQ_NO
  AND S3.SVC_SEQ_NO            = T1.SVC_SEQ_NO
  AND S3.SVC_EPP_GEN_SEQ       = T1.SVC_EPP_GEN_SEQ )
OR (  S3.SVC_ISA_FILE_ID       = T2.SVC_ISA_FILE_ID
  AND S3.SVC_GS_GRP_SEQ_NO     = T2.SVC_GS_GRP_SEQ_NO
  AND S3.SVC_ST_SEQ_NO         = T2.SVC_ST_SEQ_NO
  AND S3.SVC_LX_SEQ_NO         = T2.SVC_LX_SEQ_NO
  AND S3.SVC_CLP_CLM_SEQ_NO    = T2.SVC_CLP_CLM_SEQ_NO
  AND S3.SVC_SEQ_NO            = T2.SVC_SEQ_NO
  AND S3.SVC_EPP_GEN_SEQ       = T2.SVC_EPP_GEN_SEQ )
ORDER BY 1,2,3,4,5,6,7
) ST
ON  ( ST.SVC_ISA_FILE_ID        = UT.SVC_ISA_FILE_ID
  AND ST.SVC_GS_GRP_SEQ_NO      = UT.SVC_GS_GRP_SEQ_NO
  AND ST.SVC_ST_SEQ_NO          = UT.SVC_ST_SEQ_NO
  AND ST.SVC_LX_SEQ_NO          = UT.SVC_LX_SEQ_NO
  AND ST.SVC_CLP_CLM_SEQ_NO     = UT.SVC_CLP_CLM_SEQ_NO
  AND ST.SVC_SEQ_NO             = UT.SVC_SEQ_NO
  AND ST.SVC_EPP_GEN_SEQ        = UT.SVC_EPP_GEN_SEQ  )
WHEN MATCHED THEN
UPDATE SET
      UT.SVC_EXCL_RSN_CD        = 'RO7'
;
TABLEF FILE SQLOUT
LIST *
END
-RUN
-*-----------------------------------------------------------------------------
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL COMPLETE RETCODE &RETCODE.EVAL
-TYPE -------------------------------------------------------------------------
-IF   &FOCERRNUM.EVAL NE 0 THEN GOTO ERRORS;
-*-----------------------------------------------------------------------------
-STEP002
-SET  &STEP    = '&FOCFEXNAME.EVAL'||'.'||'STEP002';
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL Check at least one SVC was excluded or goto end
-*-----------------------------------------------------------------------------
SQL
SELECT 1
FROM   &SVC.EVAL&SVC_TBL.EVAL
WHERE  SVC_EXCL_RSN_CD  = 'RO7'
  AND  ROWNUM           < 2
;
TABLEF FILE SQLOUT
LIST *
ON TABLE HOLD
END
-RUN
-*-----------------------------------------------------------------------------
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL COMPLETE RETCODE &RETCODE.EVAL
-TYPE -------------------------------------------------------------------------
-IF   &FOCERRNUM.EVAL NE 0 THEN GOTO ERRORS;
-IF   &RECORDS.EVAL   EQ 0 THEN GOTO THE_END;
-*-----------------------------------------------------------------------------
-STEP003
-SET  &STEP    = '&FOCFEXNAME.EVAL'||'.'||'STEP003';
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL Mark CLP segments with offsetting SVCs as excluded
-*-----------------------------------------------------------------------------
SQL
MERGE INTO &CLP.EVAL&CLP_TBL.EVAL UT
USING (
SELECT /*+ PARALLEL ORDERED NO_UNNEST */
      CLP_ISA_FILE_ID
     ,CLP_GS_GRP_SEQ_NO
     ,CLP_ST_SEQ_NO
     ,CLP_LX_SEQ_NO
     ,CLP_CLM_SEQ_NO
     ,CLP_EPP_GEN_SEQ
FROM  &CLP.EVAL&CLP_TBL.EVAL
WHERE CLP_EXCL_RSN_CD = '   '
  AND EXISTS
   (  SELECT 1
      FROM   &SVC.EVAL&SVC_TBL.EVAL
      WHERE  SVC_ISA_FILE_ID    = CLP_ISA_FILE_ID
        AND  SVC_GS_GRP_SEQ_NO  = CLP_GS_GRP_SEQ_NO
        AND  SVC_ST_SEQ_NO      = CLP_ST_SEQ_NO
        AND  SVC_LX_SEQ_NO      = CLP_LX_SEQ_NO
        AND  SVC_CLP_CLM_SEQ_NO = CLP_CLM_SEQ_NO
        AND  SVC_EXCL_RSN_CD    = 'RO7' )
ORDER BY 1,2,3,4,5,6
) ST
ON  (    ST.CLP_ISA_FILE_ID     = UT.CLP_ISA_FILE_ID
     AND ST.CLP_GS_GRP_SEQ_NO   = UT.CLP_GS_GRP_SEQ_NO
     AND ST.CLP_ST_SEQ_NO       = UT.CLP_ST_SEQ_NO
     AND ST.CLP_LX_SEQ_NO       = UT.CLP_LX_SEQ_NO
     AND ST.CLP_CLM_SEQ_NO      = UT.CLP_CLM_SEQ_NO
     AND ST.CLP_EPP_GEN_SEQ     = UT.CLP_EPP_GEN_SEQ  )
WHEN MATCHED THEN
UPDATE SET UT.CLP_EXCL_RSN_CD   = 'RO7'
;
END
-RUN
-*-----------------------------------------------------------------------------
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL COMPLETE RETCODE &RETCODE.EVAL
-TYPE -------------------------------------------------------------------------
-IF   &FOCERRNUM.EVAL NE 0 THEN GOTO ERRORS;
-*-----------------------------------------------------------------------------
-STEP004
-SET  &STEP    = '&FOCFEXNAME.EVAL'||'.'||'STEP004';
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL For CLPs with still active SVC write replacement CLP
-*-----------------------------------------------------------------------------
SQL
INSERT INTO &CLP.EVAL&CLP_TBL.EVAL
SELECT /*+ PARALLEL ORDERED NO_UNNEST */
      CLP_ISA_FILE_ID
     ,CLP_GS_GRP_SEQ_NO
     ,CLP_ST_SEQ_NO
     ,CLP_LX_SEQ_NO
     ,CLP_CLM_SEQ_NO
     ,CLP_EPP_GEN_SEQ+1
     ,CLP_CLM_SUBMTR_ID
     ,CLP_CLM_STATUS_CD
     ,SUM(TO_NUMBER(COALESCE(RTRIM(SVC_ORGLI_PRVDR_PYMT),'0'))) AS CLP_TOT_CLM_CRG_AMT
     ,SUM(TO_NUMBER(COALESCE(RTRIM(SVC_LI_PRVDR_PYMT),'0')))    AS CLP_CLM_PYMT_AMT
     ,CLP_PT_RESP_AMT
     ,CLP_CLM_FIL_ID_CD
     ,CLP_PYR_CLM_CNTL_NO
     ,CLP_FCLTY_CD_VALU
     ,CLP_CLM_FREQ_TYP_CD
     ,CLP_PT_STS_CD
     ,CLP_DRG_CD
     ,CLP_QTY
     ,CLP_PCT
     ,CLP_YN_COND_RESP_CD
     ,CLP_CL_TX_MATCH_TYPE
     ,CLP_RVSD_INVC_NO
     ,CLP_INVC_FIN_CLASS
     ,CLP_INVC_CRG_COUNT
     ,CLP_MATCHED_CRG_CNT
     ,CLP_ORIG_PRICE
     ,CLP_CURRENT_BALANCE
     ,CLP_MULTI_USE_AMOUNT
     ,CLP_IS_TAKEBACK_YN
     ,'RO7'                 AS CLP_INCL_RSN_CD
     ,'   '                 AS CLP_EXCL_RSN_CD
FROM  &CLP.EVAL&CLP_TBL.EVAL
INNER JOIN
      &SVC.EVAL&SVC_TBL.EVAL
ON    SVC_ISA_FILE_ID    = CLP_ISA_FILE_ID
  AND SVC_GS_GRP_SEQ_NO  = CLP_GS_GRP_SEQ_NO
  AND SVC_ST_SEQ_NO      = CLP_ST_SEQ_NO
  AND SVC_LX_SEQ_NO      = CLP_LX_SEQ_NO
  AND SVC_CLP_CLM_SEQ_NO = CLP_CLM_SEQ_NO
  AND SVC_EXCL_RSN_CD    = '   '
WHERE CLP_EXCL_RSN_CD    = 'RO7'
GROUP BY
      CLP_ISA_FILE_ID
     ,CLP_GS_GRP_SEQ_NO
     ,CLP_ST_SEQ_NO
     ,CLP_LX_SEQ_NO
     ,CLP_CLM_SEQ_NO
     ,CLP_EPP_GEN_SEQ
     ,CLP_CLM_SUBMTR_ID
     ,CLP_CLM_STATUS_CD
     ,CLP_PT_RESP_AMT
     ,CLP_CLM_FIL_ID_CD
     ,CLP_PYR_CLM_CNTL_NO
     ,CLP_FCLTY_CD_VALU
     ,CLP_CLM_FREQ_TYP_CD
     ,CLP_PT_STS_CD
     ,CLP_DRG_CD
     ,CLP_QTY
     ,CLP_PCT
     ,CLP_YN_COND_RESP_CD
     ,CLP_CL_TX_MATCH_TYPE
     ,CLP_RVSD_INVC_NO
     ,CLP_INVC_FIN_CLASS
     ,CLP_INVC_CRG_COUNT
     ,CLP_MATCHED_CRG_CNT
     ,CLP_ORIG_PRICE
     ,CLP_CURRENT_BALANCE
     ,CLP_MULTI_USE_AMOUNT
     ,CLP_IS_TAKEBACK_YN
ORDER BY 1,2,3,4,5,6,7
;
END
-RUN
-*-----------------------------------------------------------------------------
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL COMPLETE RETCODE&RETCODE.EVAL
-TYPE -------------------------------------------------------------------------
-IF   &FOCERRNUM.EVAL NE 0 THEN GOTO ERRORS;
-*-----------------------------------------------------------------------------
-GOTO THE_END;
-TYPE -------------------------------------------------------------------------
-ERRORS
-SET &ERRFEXNAME = '&FOCFEXNAME.EVAL';
-SET &ERRSTEP    = '&STEP.EVAL';
-SET &ERRRETCODE = &RETCODE.EVAL;
-SET &ERRLINES   = &LINES.EVAL;
-SET &ERRFOCERR  = &FOCERRNUM.EVAL;
-SET &ERROR_IND  = 'ERROR';
-RUN
-INCLUDE GBL_ERRORS
-******************************************************************************
-THE_END
-******************************************************************************
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL FINISH &FOCFEXNAME.EVAL
-TYPE *************************************************************************
 
