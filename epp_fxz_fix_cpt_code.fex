-TYPE *************************************************************************
-TYPE *                      &FOCFEXNAME.EVAL
-TYPE *************************************************************************
-******************************************************************************
-* Program:
-* Title:
-* Author:       Bill Schwartz
-* Date:
-* Description:
-******************************************************************************
-* Tables Accessed:
-* Tables Updated:
-******************************************************************************
-* Include/EX Files:
-******************************************************************************
-* Files Allocated:
-******************************************************************************
-* Change History:
-*     Programmer             Date              Description of Change
-*     ------------------  ----------           -------------------------------
-*
-******************************************************************************
-*-SET &ECHO = ALL;
SET MSG = OFF
-TYPE *************************************************************************
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL START &FOCFEXNAME.EVAL
-TYPE -------------------------------------------------------------------------
-IF  &DFLTCNTL.EXISTS EQ 1 THEN GOTO STEP001;
-******************************************************************************
-STEP000
-SET  &STEP       = '&FOCFEXNAME.EVAL'||'.'||'STEP000';
-SET  &NOWTIME    = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL
-TYPE &NOWTIME.EVAL *** Establish APP PATH and defaults
-RUN
-*-----------------------------------------------------------------------------
-INCLUDE EPP3/EPP_DEFAULTS
-*-----------------------------------------------------------------------------
-SET  &STEP    = '&FOCFEXNAME.EVAL'||'.'||'STEP000';
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL COMPLETE RETCODE&RETCODE.EVAL
-TYPE -------------------------------------------------------------------------
-IF   &FOCERRNUM.EVAL NE 0 THEN GOTO ERRORS;
-*-----------------------------------------------------------------------------
-STEP001
-SET  &STEP    = '&FOCFEXNAME.EVAL'||'.'||'STEP001';
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL Match by Invoice, date and price ( bad CPT code )
-**** Insert record with corrected CPT, TX_ID, CP_Ind
-*-----------------------------------------------------------------------------
SQL
INSERT INTO &SVC.EVAL&SVC_TBL.EVAL
SELECT /*+ NOPARALLEL ORDERED NO_UNNEST */ DISTINCT
      T0.SVC_ISA_FILE_ID
     ,T0.SVC_GS_GRP_SEQ_NO
     ,T0.SVC_ST_SEQ_NO
     ,T0.SVC_LX_SEQ_NO
     ,T0.SVC_CLP_CLM_SEQ_NO
     ,T0.SVC_SEQ_NO
     ,T0.SVC_EPP_GEN_SEQ+1           AS SVC_EPP_GEN_SEQ
     ,':'                            AS SVC_COMP_SEPERATOR
     ,'HC'                           AS SVC_PROC1_SVC_ID_QLFR
     ,T2.CPT_CODE                    AS SVC_PROC1_CD
     ,T0.SVC_PROC1_MODF1
     ,T0.SVC_PROC1_MODF2
     ,T0.SVC_PROC1_MODF3
     ,T0.SVC_PROC1_MODF4
     ,T2.ORIG_PRICE                  AS SVC_ORGLI_PRVDR_PYMT
     ,T0.SVC_LI_PRVDR_PYMT
     ,T0.SVC_NTL_BILNG_REV_CD
     ,T0.SVC_UNTS_SVC_PD_CNT
     ,' '                            AS SVC_PROC2_SVC_ID_QLFR
     ,' '                            AS SVC_PROC2_CD
     ,' '                            AS SVC_PROC2_MODF1
     ,' '                            AS SVC_PROC2_MODF2
     ,' '                            AS SVC_PROC2_MODF3
     ,' '                            AS SVC_PROC2_MODF4
     ,T0.SVC_PROC2_CD_DESC
     ,T0.SVC_ORG_UNTS_SVC_CNT
     ,T2.TX_ID                       AS SVC_CLARITY_TX_ID
     ,'FXZ'                          AS SVC_TX_ID_MATCH_TYPE
     ,T0.SVC_CONTR_PAYOR_IND
     ,T0.SVC_DUP_PMT_IND
     ,T0.SVC_RVSD_INVC_NO
     ,T0.SVC_CURRENT_BALANCE
     ,T0.SVC_INS_AMOUNT_PAID
     ,T0.SVC_INS_AMOUNT_ADJ
     ,T0.SVC_CRG_IS_VOID_YN
     ,T0.SVC_PRIOR_DENIAL_YN
     ,T0.SVC_MULTI_USE_AMOUNT
     ,T0.SVC_SCENARIO
     ,'FXZ'                          AS SVC_INCL_RSN_CD
     ,'   '                          AS SVC_EXCL_RSN_CD
FROM
(
SELECT /*+ ORDERED NO_UNNEST */
      COALESCE(RTRIM(CLP_CLM_SUBMTR_ID),' ')   AS CLP_CLM_SUBMTR_ID
     ,TO_DATE(SVC_DTM_DATE, 'yyyymmdd')        AS SVC_DTM_DATE
     ,COALESCE(RTRIM(SVC_PROC1_CD),'XXXXX')    AS SVC_PROC1_CD
	 ,COALESCE(RTRIM(SVC_PROC2_CD),'XXXXX')    AS SVC_PROC2_CD
     ,TO_NUMBER(COALESCE(RTRIM(SVC_ORGLI_PRVDR_PYMT),'0'))
                                               AS SVC_ORGLI_PRVDR_PYMT
     ,RANK()
      OVER ( PARTITION BY RTRIM(CLP_CLM_SUBMTR_ID)
                         ,TO_DATE(SVC_DTM_DATE, 'yyyymmdd')
                         ,COALESCE(RTRIM(SVC_PROC1_CD),'XXXXX')
						 ,COALESCE(RTRIM(SVC_PROC2_CD),'XXXXX')
                         ,RTRIM(SVC_ORGLI_PRVDR_PYMT)
             ORDER BY     CLP_CLM_SUBMTR_ID
                         ,SVC_DTM_DATE
                         ,COALESCE(RTRIM(SVC_PROC1_CD),'XXXXX')
                         ,COALESCE(RTRIM(SVC_PROC2_CD),'XXXXX')
                         ,SVC_ORGLI_PRVDR_PYMT
						 ,SVC_SEQ_NO )         AS T_RANK
     ,SVC_ISA_FILE_ID
     ,SVC_GS_GRP_SEQ_NO
     ,SVC_ST_SEQ_NO
     ,SVC_LX_SEQ_NO
     ,SVC_CLP_CLM_SEQ_NO
     ,SVC_SEQ_NO
     ,SVC_EPP_GEN_SEQ
     ,SVC_COMP_SEPERATOR
     ,SVC_PROC1_SVC_ID_QLFR
     ,SVC_PROC1_MODF1
     ,SVC_PROC1_MODF2
     ,SVC_PROC1_MODF3
     ,SVC_PROC1_MODF4
     ,SVC_LI_PRVDR_PYMT
     ,SVC_NTL_BILNG_REV_CD
     ,SVC_UNTS_SVC_PD_CNT
     ,SVC_PROC2_SVC_ID_QLFR
-*     ,SVC_PROC2_CD
     ,SVC_PROC2_MODF1
     ,SVC_PROC2_MODF2
     ,SVC_PROC2_MODF3
     ,SVC_PROC2_MODF4
     ,SVC_PROC2_CD_DESC
     ,SVC_ORG_UNTS_SVC_CNT
     ,SVC_CONTR_PAYOR_IND
     ,SVC_DUP_PMT_IND
     ,SVC_RVSD_INVC_NO
     ,SVC_CURRENT_BALANCE
     ,SVC_INS_AMOUNT_PAID
     ,SVC_INS_AMOUNT_ADJ
     ,SVC_CRG_IS_VOID_YN
     ,SVC_PRIOR_DENIAL_YN
     ,SVC_MULTI_USE_AMOUNT
     ,SVC_SCENARIO
FROM  &ST.EVAL&ST_TBL.EVAL
INNER JOIN
      &IFCT.EVAL&IFCT_TBL.EVAL
ON    IFCT_FILE_ID              = ST_ISA_FILE_ID
  AND RTRIM(IFCT_FILE_PAYER)    = 'CIGNA'
INNER JOIN
      &CLP.EVAL&CLP_TBL.EVAL
ON    CLP_ISA_FILE_ID               = ST_ISA_FILE_ID
  AND CLP_GS_GRP_SEQ_NO             = ST_GS_GRP_SEQ_NO
  AND CLP_ST_SEQ_NO                 = ST_SEQ_NO
  AND SUBSTR(CLP_CLM_SUBMTR_ID,1,1) = 'P'
-*  AND CLP_CLM_STATUS_CD            <> '22'
  AND CLP_EXCL_RSN_CD               = '   '
INNER JOIN
      &SVC.EVAL&SVC_TBL.EVAL
ON    SVC_ISA_FILE_ID           = CLP_ISA_FILE_ID
  AND SVC_GS_GRP_SEQ_NO         = CLP_GS_GRP_SEQ_NO
  AND SVC_ST_SEQ_NO             = CLP_ST_SEQ_NO
  AND SVC_LX_SEQ_NO             = CLP_LX_SEQ_NO
  AND SVC_CLP_CLM_SEQ_NO        = CLP_CLM_SEQ_NO
  AND RTRIM(SVC_PROC2_CD)       IS NOT NULL
-*  AND RTRIM(SVC_CLARITY_TX_ID)  = '0'
  AND SVC_EXCL_RSN_CD           = '   '
INNER JOIN
      &SVC_DTM.EVAL&SVC_DTM_TBL.EVAL
ON    SVC_DTM_ISA_FILE_ID       = SVC_ISA_FILE_ID
  AND SVC_DTM_GS_GRP_SEQ_NO     = SVC_GS_GRP_SEQ_NO
  AND SVC_DTM_ST_SEQ_NO         = SVC_ST_SEQ_NO
  AND SVC_DTM_LX_SEQ_NO         = SVC_LX_SEQ_NO
  AND SVC_DTM_CLP_CLM_SEQ_NO    = SVC_CLP_CLM_SEQ_NO
  AND SVC_DTM_SVC_SEQ_NO        = SVC_SEQ_NO
  AND SVC_DTM_DTTM_QLFR         IN('472','150')
  AND SVC_DTM_EXCL_RSN_CD       = '   '
WHERE ST_EXCL_RSN_CD            = '   '
ORDER BY 1,2,3,4,5
) T0
INNER JOIN
(
SELECT /*+ ORDERED NO_UNNEST */
      COALESCE(CLP_CLM_SUBMTR_ID,' ')          AS CLP_CLM_SUBMTR_ID
	 ,SVC_DTM_DATE
	 ,SVC_PROC1_CD
	 ,SVC_PROC2_CD
     ,SVC_ORGLI_PRVDR_PYMT
     ,RANK()
      OVER ( PARTITION BY CLP_CLM_SUBMTR_ID
                         ,SVC_DTM_DATE
						 ,SVC_PROC1_CD
                         ,SVC_PROC2_CD
                         ,SVC_ORGLI_PRVDR_PYMT
             ORDER BY     CLP_CLM_SUBMTR_ID
                         ,SVC_DTM_DATE
						 ,SVC_PROC1_CD
                         ,SVC_PROC2_CD
                         ,SVC_ORGLI_PRVDR_PYMT
                         ,TX_ID  )             AS T_RANK
     ,TX_ID
 	 ,CPT_CODE
     ,CASE WHEN CLP_CLM_STATUS_CD = '22'
                THEN 0-ORIG_PRICE
           ELSE ORIG_PRICE
       END                                      AS ORIG_PRICE
FROM
(
SELECT /*+ INDEX(A IDX_CLARITY_TDL_TRAN_INV_C) ORDERED NO_UNNEST */
      CLP_CLM_SUBMTR_ID
	 ,SVC_DTM_DATE
     ,SVC_PROC1_CD
     ,SVC_PROC2_CD
     ,SVC_ORGLI_PRVDR_PYMT
     ,CLP_CLM_STATUS_CD
     ,TX_ID
	 ,CASE WHEN PROC_OR_REV_CODE IN('360','490')
            AND UB_CPT_CODE      <> CPT_CODE
                THEN UB_CPT_CODE
           WHEN UB_CPT_CODE      <> CPT_CODE
            AND UB_CPT_CODE      IS NOT NULL
                THEN UB_CPT_CODE
           ELSE CPT_CODE
       END                                     AS CPT_CODE
     ,CASE WHEN A.ORIG_AMT <> A.ORIG_PRICE
            AND A.BILL_CLAIM_AMOUNT = 0
                THEN A.ORIG_AMT
           WHEN A.BILL_CLAIM_AMOUNT = A.ORIG_AMT
                THEN CAST(A.BILL_CLAIM_AMOUNT AS NUMBER(10,2))
           ELSE CAST(A.ORIG_PRICE AS NUMBER(10,2))
      END                                      AS ORIG_PRICE
FROM
(
SELECT
      RTRIM(CLP_CLM_SUBMTR_ID)                 AS CLP_CLM_SUBMTR_ID
	 ,TO_DATE(SVC_DTM_DATE, 'yyyymmdd')        AS SVC_DTM_DATE
	 ,COALESCE(RTRIM(SVC_PROC1_CD),'XXXXX')    AS SVC_PROC1_CD
	 ,COALESCE(RTRIM(SVC_PROC2_CD),'XXXXX')    AS SVC_PROC2_CD
     ,TO_NUMBER(COALESCE(RTRIM(SVC_ORGLI_PRVDR_PYMT),'0'))
                                               AS SVC_ORGLI_PRVDR_PYMT
     ,CLP_CLM_STATUS_CD
     ,SVC_SEQ_NO
     ,CLP_ISA_FILE_ID
     ,CLP_GS_GRP_SEQ_NO
     ,CLP_ST_SEQ_NO
     ,CLP_LX_SEQ_NO
     ,CLP_CLM_SEQ_NO
FROM  &ST.EVAL&ST_TBL.EVAL
INNER JOIN
      &IFCT.EVAL&IFCT_TBL.EVAL
ON    IFCT_FILE_ID              = ST_ISA_FILE_ID
  AND RTRIM(IFCT_FILE_PAYER)    = 'CIGNA'
INNER JOIN
      &CLP.EVAL&CLP_TBL.EVAL
ON    CLP_ISA_FILE_ID           = ST_ISA_FILE_ID
  AND CLP_GS_GRP_SEQ_NO         = ST_GS_GRP_SEQ_NO
  AND CLP_ST_SEQ_NO             = ST_SEQ_NO
-*  AND CLP_CLM_STATUS_CD        <> '22'
  AND CLP_EXCL_RSN_CD           = '   '
  AND SUBSTR(CLP_CLM_SUBMTR_ID,1,1) = 'P'
INNER JOIN
      &SVC.EVAL&SVC_TBL.EVAL
ON    SVC_ISA_FILE_ID           = CLP_ISA_FILE_ID
  AND SVC_GS_GRP_SEQ_NO         = CLP_GS_GRP_SEQ_NO
  AND SVC_ST_SEQ_NO             = CLP_ST_SEQ_NO
  AND SVC_LX_SEQ_NO             = CLP_LX_SEQ_NO
  AND SVC_CLP_CLM_SEQ_NO        = CLP_CLM_SEQ_NO
  AND RTRIM(SVC_PROC2_CD)       IS NOT NULL
-*  AND RTRIM(SVC_CLARITY_TX_ID)  = '0'
  AND SVC_EXCL_RSN_CD           = '   '
INNER JOIN
      &SVC_DTM.EVAL&SVC_DTM_TBL.EVAL
ON    SVC_DTM_ISA_FILE_ID       = SVC_ISA_FILE_ID
  AND SVC_DTM_GS_GRP_SEQ_NO     = SVC_GS_GRP_SEQ_NO
  AND SVC_DTM_ST_SEQ_NO         = SVC_ST_SEQ_NO
  AND SVC_DTM_LX_SEQ_NO         = SVC_LX_SEQ_NO
  AND SVC_DTM_CLP_CLM_SEQ_NO    = SVC_CLP_CLM_SEQ_NO
  AND SVC_DTM_SVC_SEQ_NO        = SVC_SEQ_NO
  AND SVC_DTM_DTTM_QLFR         IN('472','150')
  AND SVC_EXCL_RSN_CD           = '   '
WHERE ST_EXCL_RSN_CD            = '   '
ORDER BY 1,2
) T1
INNER JOIN
      CLARITY_TDL_TRAN A
ON    INVOICE_NUMBER            = CLP_CLM_SUBMTR_ID
  AND ORIG_SERVICE_DATE         = SVC_DTM_DATE
  AND CPT_CODE                  = SVC_PROC2_CD
  AND DETAIL_TYPE               = 50
  AND ((    A.ORIG_AMT         <> A.ORIG_PRICE
        AND A.BILL_CLAIM_AMOUNT = 0
        AND A.ORIG_AMT          = ABS(SVC_ORGLI_PRVDR_PYMT))
    OR  (   A.BILL_CLAIM_AMOUNT = A.ORIG_AMT
        AND A.BILL_CLAIM_AMOUNT = ABS(SVC_ORGLI_PRVDR_PYMT))
    OR  (   A.ORIG_PRICE        = ABS(SVC_ORGLI_PRVDR_PYMT)))
LEFT OUTER JOIN
      CLARITY_EPM      B
ON    PAYOR_ID                  = CUR_PAYOR_ID
LEFT OUTER JOIN
      INV_CLM_LN_ADDL  Q
ON    INVOICE_NUM               = CLP_CLM_SUBMTR_ID
  AND (    INSTR(TRANSACTION_LIST,',', 1, 1) = 0
       AND TRANSACTION_LIST     = TO_CHAR(A.TX_ID) )
  AND ((PROC_OR_REV_CODE        = RTRIM(SVC_PROC2_CD))
    OR (PROC_OR_REV_CODE        IN('390','490')
    AND UB_CPT_CODE             = RTRIM(SVC_PROC2_CD)))
  AND FROM_SVC_DATE             = SVC_DTM_DATE
  AND CHARGE_AMOUNT             = SVC_ORGLI_PRVDR_PYMT
-*WHERE NOT EXISTS
-*    ( SELECT  /*+ ORDERED NO_UNNEST */ 1
-*      FROM   INV_CLM_LN_ADDL
-*      WHERE  INVOICE_NUM        = CLP_CLM_SUBMTR_ID
-*        AND  PROC_OR_REV_CODE   = SVC_PROC1_CD
-*        AND  FROM_SVC_DATE      = SVC_DTM_DATE
-*        AND  CHARGE_AMOUNT      = SVC_ORGLI_PRVDR_PYMT )
WHERE NOT EXISTS
    ( SELECT /*+ ORDERED NO_UNNEST */ 1
      FROM   CLARITY_EAP_ALTCOD AC
            ,INV_CLM_LN_ADDL    C
      WHERE  AC.PROC_ID         = A.PROC_ID
        AND  AC.EPM_ALT_IDFR    = B.EPM_ALT_IDFR
        AND  C.INVOICE_NUM      = A.INVOICE_NUMBER
        AND  C.PROC_OR_REV_CODE = AC.PROC_ALT_IDFR )
GROUP BY
      CLP_CLM_SUBMTR_ID
	 ,SVC_DTM_DATE
     ,SVC_PROC1_CD
     ,SVC_PROC2_CD
     ,SVC_ORGLI_PRVDR_PYMT
     ,CLP_CLM_STATUS_CD
     ,TX_ID
	 ,CASE WHEN PROC_OR_REV_CODE IN('360','490')
            AND UB_CPT_CODE      <> CPT_CODE
                THEN UB_CPT_CODE
           WHEN UB_CPT_CODE      <> CPT_CODE
            AND UB_CPT_CODE      IS NOT NULL
                THEN UB_CPT_CODE
           ELSE CPT_CODE   END
     ,CASE WHEN A.ORIG_AMT <> A.ORIG_PRICE
            AND A.BILL_CLAIM_AMOUNT = 0
                THEN A.ORIG_AMT
           WHEN A.BILL_CLAIM_AMOUNT = A.ORIG_AMT
                THEN CAST(A.BILL_CLAIM_AMOUNT AS NUMBER(10,2))
           ELSE CAST(A.ORIG_PRICE AS NUMBER(10,2)) END
)
ORDER BY 1,2,3,4,5
) T2
ON    T2.CLP_CLM_SUBMTR_ID           = T0.CLP_CLM_SUBMTR_ID
  AND T2.SVC_DTM_DATE                = T0.SVC_DTM_DATE
  AND T2.SVC_PROC1_CD                = T0.SVC_PROC1_CD
  AND T2.SVC_PROC2_CD                = T0.SVC_PROC2_CD
  AND RTRIM(T2.SVC_ORGLI_PRVDR_PYMT) = RTRIM(T0.SVC_ORGLI_PRVDR_PYMT)
  AND T2.T_RANK                      = T0.T_RANK
ORDER BY 1,2,3,4,5,6,7
;
END
-RUN
-*-----------------------------------------------------------------------------
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL COMPLETE RETCODE &RETCODE.EVAL
-TYPE -------------------------------------------------------------------------
-IF   &FOCERRNUM.EVAL NE 0 THEN GOTO ERRORS;
-*-----------------------------------------------------------------------------
-STEP002
-SET  &STEP    = '&FOCFEXNAME.EVAL'||'.'||'STEP002';
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL
-*-----------------------------------------------------------------------------
SQL
SELECT 1
FROM   &SVC.EVAL&SVC_TBL.EVAL
WHERE  SVC_INCL_RSN_CD  = 'FXZ'
  AND  ROWNUM           < 2
;
TABLEF FILE SQLOUT
LIST *
ON TABLE HOLD
END
-RUN
-*-----------------------------------------------------------------------------
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL COMPLETE RETCODE &RETCODE.EVAL
-TYPE -------------------------------------------------------------------------
-IF   &FOCERRNUM.EVAL NE 0 THEN GOTO ERRORS;
-IF   &RECORDS.EVAL   EQ 0 THEN GOTO THE_END;
-*-----------------------------------------------------------------------------
-STEP003
-SET  &STEP    = '&FOCFEXNAME.EVAL'||'.'||'STEP003';
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL Mark row with bad CPT as excluded
-*-----------------------------------------------------------------------------
SQL
MERGE INTO &SVC.EVAL&SVC_TBL.EVAL UT
USING (
SELECT
      B.SVC_ISA_FILE_ID
     ,B.SVC_GS_GRP_SEQ_NO
     ,B.SVC_ST_SEQ_NO
     ,B.SVC_LX_SEQ_NO
     ,B.SVC_CLP_CLM_SEQ_NO
     ,B.SVC_SEQ_NO
	 ,B.SVC_EPP_GEN_SEQ
FROM  &SVC.EVAL&SVC_TBL.EVAL A
INNER JOIN
      &SVC.EVAL&SVC_TBL.EVAL B
ON    B.SVC_ISA_FILE_ID       = A.SVC_ISA_FILE_ID
  AND B.SVC_GS_GRP_SEQ_NO     = A.SVC_GS_GRP_SEQ_NO
  AND B.SVC_ST_SEQ_NO         = A.SVC_ST_SEQ_NO
  AND B.SVC_LX_SEQ_NO         = A.SVC_LX_SEQ_NO
  AND B.SVC_CLP_CLM_SEQ_NO    = A.SVC_CLP_CLM_SEQ_NO
  AND B.SVC_SEQ_NO            = A.SVC_SEQ_NO
  AND B.SVC_INCL_RSN_CD      <> 'FXZ'
  AND B.SVC_EXCL_RSN_CD       = '   '
WHERE A.SVC_INCL_RSN_CD       = 'FXZ'
) ST
ON  ( UT.SVC_ISA_FILE_ID      = ST.SVC_ISA_FILE_ID
  AND UT.SVC_GS_GRP_SEQ_NO    = ST.SVC_GS_GRP_SEQ_NO
  AND UT.SVC_ST_SEQ_NO        = ST.SVC_ST_SEQ_NO
  AND UT.SVC_LX_SEQ_NO        = ST.SVC_LX_SEQ_NO
  AND UT.SVC_CLP_CLM_SEQ_NO   = ST.SVC_CLP_CLM_SEQ_NO
  AND UT.SVC_SEQ_NO           = ST.SVC_SEQ_NO
  AND UT.SVC_EPP_GEN_SEQ      = ST.SVC_EPP_GEN_SEQ )
WHEN MATCHED THEN
UPDATE SET UT.SVC_EXCL_RSN_CD = 'FXZ'
;
END
-RUN
-*-----------------------------------------------------------------------------
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL COMPLETE RETCODE &RETCODE.EVAL
-TYPE -------------------------------------------------------------------------
-STEP004
-SET  &STEP    = '&FOCFEXNAME.EVAL'||'.'||'STEP004';
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL
-*-----------------------------------------------------------------------------
SQL
MERGE INTO &CLP.EVAL&CLP_TBL.EVAL UT
USING (
SELECT
      CLP_ISA_FILE_ID
     ,CLP_GS_GRP_SEQ_NO
     ,CLP_ST_SEQ_NO
     ,CLP_LX_SEQ_NO
     ,CLP_CLM_SEQ_NO
     ,CLP_EPP_GEN_SEQ
     ,CLP_INCL_RSN_CD
FROM  &CLP.EVAL&CLP_TBL.EVAL
WHERE CLP_EXCL_RSN_CD           = '   '
  AND EXISTS
    ( SELECT 1
      FROM   &SVC.EVAL&SVC_TBL.EVAL
      WHERE  SVC_ISA_FILE_ID    = CLP_ISA_FILE_ID
        AND  SVC_GS_GRP_SEQ_NO  = CLP_GS_GRP_SEQ_NO
        AND  SVC_ST_SEQ_NO      = CLP_ST_SEQ_NO
        AND  SVC_LX_SEQ_NO      = CLP_LX_SEQ_NO
        AND  SVC_CLP_CLM_SEQ_NO = CLP_CLM_SEQ_NO
        AND  SVC_EXCL_RSN_CD    = 'FXZ' )
  AND NOT EXISTS
    ( SELECT 1
      FROM   &CLP_CAS.EVAL&CLP_CAS_TBL.EVAL
      WHERE  CLP_CAS_ISA_FILE_ID    = CLP_CAS_ISA_FILE_ID
        AND  CLP_CAS_GS_GRP_SEQ_NO  = CLP_CAS_GS_GRP_SEQ_NO
        AND  CLP_CAS_ST_SEQ_NO      = CLP_CAS_ST_SEQ_NO
        AND  CLP_CAS_LX_SEQ_NO      = CLP_CAS_LX_SEQ_NO
        AND  CLP_CAS_CLP_CLM_SEQ_NO = CLP_CLM_SEQ_NO
        AND  CLP_CAS_EXCL_RSN_CD    = '   ' )
ORDER BY 1,2,3,4,5,6
) ST
ON  ( ST.CLP_ISA_FILE_ID        = UT.CLP_ISA_FILE_ID
  AND ST.CLP_GS_GRP_SEQ_NO      = UT.CLP_GS_GRP_SEQ_NO
  AND ST.CLP_ST_SEQ_NO          = UT.CLP_ST_SEQ_NO
  AND ST.CLP_LX_SEQ_NO          = UT.CLP_LX_SEQ_NO
  AND ST.CLP_CLM_SEQ_NO         = UT.CLP_CLM_SEQ_NO
  AND ST.CLP_EPP_GEN_SEQ        = UT.CLP_EPP_GEN_SEQ )
WHEN MATCHED THEN
UPDATE SET UT.CLP_EXCL_RSN_CD   = 'FXZ'
;
END
-RUN
-*-----------------------------------------------------------------------------
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL COMPLETE RETCODE &RETCODE.EVAL
-TYPE -------------------------------------------------------------------------
-IF   &FOCERRNUM.EVAL NE 0 THEN GOTO ERRORS;
-*-----------------------------------------------------------------------------
-STEP005
-SET  &STEP    = '&FOCFEXNAME.EVAL'||'.'||'STEP005';
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL
-*-----------------------------------------------------------------------------
SQL
INSERT INTO &CLP.EVAL&CLP_TBL.EVAL
SELECT
      CLP_ISA_FILE_ID
     ,CLP_GS_GRP_SEQ_NO
     ,CLP_ST_SEQ_NO
     ,CLP_LX_SEQ_NO
     ,CLP_CLM_SEQ_NO
     ,CLP_EPP_GEN_SEQ+1
     ,CLP_CLM_SUBMTR_ID
     ,CLP_CLM_STATUS_CD
     ,SUM(TO_NUMBER(SVC_ORGLI_PRVDR_PYMT)) AS CLP_TOT_CLM_CRG_AMT
     ,SUM(TO_NUMBER(SVC_LI_PRVDR_PYMT))    AS CLP_CLM_PYMT_AMT
     ,CLP_PT_RESP_AMT
     ,CLP_CLM_FIL_ID_CD
     ,CLP_PYR_CLM_CNTL_NO
     ,CLP_FCLTY_CD_VALU
     ,CLP_CLM_FREQ_TYP_CD
     ,CLP_PT_STS_CD
     ,CLP_DRG_CD
     ,CLP_QTY
     ,CLP_PCT
     ,CLP_YN_COND_RESP_CD
     ,CLP_CL_TX_MATCH_TYPE
     ,CLP_RVSD_INVC_NO
     ,CLP_INVC_FIN_CLASS
     ,CLP_INVC_CRG_COUNT
     ,CLP_MATCHED_CRG_CNT
     ,CLP_ORIG_PRICE
     ,CLP_CURRENT_BALANCE
     ,CLP_MULTI_USE_AMOUNT
     ,CLP_IS_TAKEBACK_YN
     ,'FXZ'                AS CLP_INCL_RSN_CD
     ,'   '                AS CLP_EXCL_RSN_CD
FROM  &CLP.EVAL&CLP_TBL.EVAL
INNER JOIN
      &SVC.EVAL&SVC_TBL.EVAL
ON    SVC_ISA_FILE_ID    = CLP_ISA_FILE_ID
  AND SVC_GS_GRP_SEQ_NO  = CLP_GS_GRP_SEQ_NO
  AND SVC_ST_SEQ_NO      = CLP_ST_SEQ_NO
  AND SVC_LX_SEQ_NO      = CLP_LX_SEQ_NO
  AND SVC_CLP_CLM_SEQ_NO = CLP_CLM_SEQ_NO
-*  AND SVC_INCL_RSN_CD    = 'FXZ'
  AND SVC_EXCL_RSN_CD    = '   '
WHERE CLP_EXCL_RSN_CD    = 'FXZ'
GROUP BY
      CLP_ISA_FILE_ID
     ,CLP_GS_GRP_SEQ_NO
     ,CLP_ST_SEQ_NO
     ,CLP_LX_SEQ_NO
     ,CLP_CLM_SEQ_NO
     ,CLP_EPP_GEN_SEQ+1
     ,CLP_CLM_SUBMTR_ID
     ,CLP_CLM_STATUS_CD
     ,CLP_CLM_PYMT_AMT
     ,CLP_PT_RESP_AMT
     ,CLP_CLM_FIL_ID_CD
     ,CLP_PYR_CLM_CNTL_NO
     ,CLP_FCLTY_CD_VALU
     ,CLP_CLM_FREQ_TYP_CD
     ,CLP_PT_STS_CD
     ,CLP_DRG_CD
     ,CLP_QTY
     ,CLP_PCT
     ,CLP_YN_COND_RESP_CD
     ,CLP_CL_TX_MATCH_TYPE
     ,CLP_RVSD_INVC_NO
     ,CLP_INVC_FIN_CLASS
     ,CLP_INVC_CRG_COUNT
     ,CLP_MATCHED_CRG_CNT
     ,CLP_ORIG_PRICE
     ,CLP_CURRENT_BALANCE
     ,CLP_MULTI_USE_AMOUNT
     ,CLP_IS_TAKEBACK_YN
ORDER BY 1,2,3,4,5,6,7
;
END
-RUN
-*-----------------------------------------------------------------------------
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL &STEP.EVAL COMPLETE RETCODE&RETCODE.EVAL
-TYPE -------------------------------------------------------------------------
-IF   &FOCERRNUM.EVAL NE 0 THEN GOTO ERRORS;
-*-----------------------------------------------------------------------------
-GOTO THE_END;
-TYPE -------------------------------------------------------------------------
-ERRORS
-SET &ERRFEXNAME = '&FOCFEXNAME.EVAL';
-SET &ERRSTEP    = '&STEP.EVAL';
-SET &ERRRETCODE = &RETCODE.EVAL;
-SET &ERRLINES   = &LINES.EVAL;
-SET &ERRFOCERR  = &FOCERRNUM.EVAL;
-SET &ERROR_IND  = 'ERROR';
-RUN
-INCLUDE GBL_ERRORS
-******************************************************************************
-THE_END
-******************************************************************************
-SET  &NOWTIME = HHMMSS(A8);
-TYPE &NOWTIME.EVAL FINISH &FOCFEXNAME.EVAL
-TYPE *************************************************************************
 
